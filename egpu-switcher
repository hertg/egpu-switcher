#!/bin/bash

# define some colors
RED='\033[1;31m'
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'
BLANK='\033[0m'

# define log level prefix
ERROR="$RED[error]$BLANK"
WARN="$YELLOW[warn]$BLANK"
SUCCESS="$GREEN[success]$BLANK"
INFO="$BLUE[info]$BLANK"

# constant variables
XDIR=/etc/X11
XFILE=$XDIR/xorg.conf
XFILE_EGPU=$XDIR/xorg.conf.egpu
XFILE_INTERNAL=$XDIR/xorg.conf.internal
XFILE_BACKUP=$XFILE.backup
TMP_DIR=/tmp/egpu-switcher
TMP_FILE=$TMP_DIR/results
TMP_TEMPLATE=/usr/share/egpu-switcher/xorg.conf.template
INITD_SCRIPT=/etc/init.d/egpu-switcher
INITD_RC5_SYMLINK=/etc/rc5.d/S15egpu-switcher
DATETIME=$(date '+%Y%m%d%H%M%S')
NUMBER_REGEX='^[0-9]+$'

# check if the script is run as root
if [[ $EUID -ne 0 ]]; then 
  	echo -e "$ERROR You need to run the script with root privileges"
  	exit
fi

# check if an argument was passed
if [ -z $1 ]; then
	echo -e "$ERROR No argument passed."
	exit
fi

read_gpus() {
	if [ -z $1 ]; then
		printf "$INFO Using default argument for read_gpus().\n"
		set -- "lspci"
	fi

	if [ $1 = "nvidia-xconfig" ]; then
		nvidia-xconfig --query-gpu-info | grep -i -e 'gpu #[0-9]' | while read -r line ; do
			bus=$(nvidia-xconfig --query-gpu-info | grep "$line" -A 3 | awk '/PCI BusID/{print$4}')
			name=$(nvidia-xconfig --query-gpu-info | grep "$line" -A 3 | grep -oP 'Name\s+\:\s+\K.*')
			echo -e "$name ($bus)" >> $TMP_FILE
		done
		return
	fi

	if [ $1 = "lspci" ]; then
		lspci | grep -i -E "vga|3d" | while read -r line ; do
			name=$(echo $line | grep -o -e "[^:]*$")
			bus=$(echo $line | grep -o -e "^[^ ]*")

			# The bus IDs in hex
			bus1h=${bus:0:2}
			bus2h=${bus:3:2}
			bus3h=${bus:6:1}

			# The bus IDs in dec
			bus1d=$((16#$bus1h))
			bus2d=$((16#$bus2h))
			bus3d=$((16#$bus3h))

			# Remove the whitespace at the beginning of the name
			# And concatenate bus IDs
			echo -e "${name:1} (PCI:$bus1d:$bus2d:$bus3d)" >> $TMP_FILE
		done
		return
	fi

	echo -e "$ERROR Unknown option \"$1\" passed to is_egpu_connected. Exit program."
	exit
}

# returns 1 if egpu is connected, 0 if not
is_egpu_connected() {
	# read pci id from xorg.conf.egpu
	EGPU_PCI_ID=$(cat $XFILE_EGPU | grep -Ei "BusID" | grep -oEi '[0-9]+\:[0-9]+\:[0-9]+')

	if [ -z $1 ]; then
		echo -e "$INFO No argument passed to is_egpu_connected() method. Using nvidia-xconfig by default."
		set -- "nvidia-xconfig"
	fi

	if [ $1 = "nvidia-xconfig" ]; then 
		if [ $(nvidia-xconfig --query-gpu-info | grep -c $EGPU_PCI_ID) -eq 1 ]; then
			return 1;
		else
			return 0;
		fi
	fi

	if [ $1 = "lspci" ]; then
		echo -e "$WARN method $1 not implemented yet. Exit program."
		exit
	fi

	echo -e "$ERROR Unknown option \"$1\" passed to is_egpu_connected. Exit program."
	exit
}

setup() {

	# create the tmp dir
	mkdir -p $TMP_DIR

	# delete existing results file
	rm -f $TMP_FILE

	# check if the template/script files can be found
	if [ ! -f $TMP_TEMPLATE ]; then
		echo -e "$ERROR The file $TMP_TEMPLATE wasn't found. Are you connected to the Internet?"
		exit
	fi

	# search for GPUs and save them to the temp file
	read_gpus $1

	if ! [ -f $TMP_FILE ]; then 
		echo -e "$ERROR There was a problem in reading the connected GPUs."
		if ! [ -z $1 ]; then
			echo -e "$ERROR Maybe your argument \"$1\" is not valid?"
		fi
		exit
	fi

	# save the number of lines to a variable
	NUM_OF_RESULTS=$(wc -l < $TMP_FILE)

	# additional check
	if [ $NUM_OF_RESULTS -lt "2" ]; then
		echo -e "$WARN Only $NUM_OF_RESULTS GPUs found, there need to be at least 2. Make sure to connect your EGPU for the setup."
		exit
	fi

	# print the GPUs found
	echo ""
	echo -e "Found $NUM_OF_RESULTS possible GPUs..."
	echo ""

	i=0
	while read -r line; do
		i=$((i+1))
		echo "  $i: $line"
	done < "$TMP_FILE"

	echo ""

	# prompt to choose the internal gpu from the list
	printf "Choose your preferred$GREEN INTERNAL$BLANK GPU [1-$NUM_OF_RESULTS]: "
	read internal
	PCI_INTERNAL=$(sed ''"$internal"'q;d' $TMP_FILE | grep -Eo 'PCI\:[0-9]+\:[0-9]+\:[0-9]+')

	if ! [[ $internal =~ $NUMBER_REGEX ]] || [ -z "$PCI_INTERNAL" ]; then
		echo -e "$ERROR Your input is invalid. Exiting setup..."
		exit
	fi

	# prompt to choose the external gpu from the list
	printf "Choose your preferred$GREEN EXTERNAL$BLANK GPU [1-$NUM_OF_RESULTS]: "
	read external
	PCI_EXTERNAL=$(sed ''"$external"'q;d' $TMP_FILE | grep -Eo 'PCI\:[0-9]+\:[0-9]+\:[0-9]+')

	if ! [[ $external =~ $NUMBER_REGEX ]] || [ -z "$PCI_EXTERNAL" ]; then
		echo -e "$ERROR Your input is invalid. Exiting setup..."
		exit
	fi

	echo ""

	if ! [ -f $TMP_TEMPLATE ]; then
		echo -e "$ERROR Something is wrong with your installation, the file \"$TMP_TEMPLATE\" was not found."
	fi

	# create the internal xorg config file
	#cp $TMP_TEMPLATE $XFILE_INTERNAL
	#sed -i -e 's/\$BUS/'$PCI_INTERNAL'/g' -e 's/\$DRIVER/nvidia/g' -e 's/\$ID/Device0/g' $XFILE_INTERNAL

	# create the external xorg config file
	#cp $TMP_TEMPLATE $XFILE_EGPU
	#sed -i -e 's/\$BUS/'$PCI_EXTERNAL'/g' -e 's/\$DRIVER/nvidia/g' -e 's/\$ID/Device0/g' $XFILE_EGPU

	cp $TMP_TEMPLATE $XFILE
	sed -i -e 's/\$BUS_INTERNAL/'$PCI_INTERNAL'/g' -e 's/\$BUS_EXTERNAL/'$PCI_EXTERNAL'/g' $XFILE

	# Executing the switch command to create the xorg.conf file
	#switch auto $1

	# setup startup script
	#touch $INITD_SCRIPT
	#chmod +x $INITD_SCRIPT
	#echo "egpu-switcher switch auto" > $INITD_SCRIPT
	#ln -sf $INITD_SCRIPT $INITD_RC5_SYMLINK
	#update-rc.d egpu-switcher defaults

	#if ! [ -f $INITD_SCRIPT ]; then
	#	echo -e "$ERROR Could not create the init.d startup script."
	#fi

	echo -e "$SUCCESS Done... Setup finished"
}

switch() {
	# Check if the argument was passed
	if [ -z $1 ]; then
		echo -e "$ERROR No argument passed to the switch method. Possible options: auto, egpu, internal"
		exit
	fi

	# Check if the xorg.conf files for internal and egpu exist
	if ! [ -f $XFILE_EGPU ] || ! [ -f $XFILE_INTERNAL ]; then
		echo -e "$ERROR The xorg.conf files for egpu and internal do not exist. Run the setup first."
		return
	fi

	# Check if there is a xorg.conf file, and back it up
	if [ -f $XFILE ] && ! [ -L $XFILE ]; then
		echo -e "$WARN The $XFILE file already exists. Saving a backup to $XFILE_BACKUP.$DATETIME"
		cp "$XFILE" "$XFILE_BACKUP.$DATETIME"
	fi

	# if no parameter was passed to the method
	if [ $1 = "auto" ]; then

		is_egpu_connected $2
		local connected=$?
		printf "$INFO Automatically detecting if egpu is connected... "
		if [ $connected = 1 ] ; then
			echo -e "$GREEN true"
			set -- "egpu"
		else
			echo -e "$RED false"
			set -- "internal"
		fi
	fi

	if [ $1 = "egpu" ]; then
		echo -e "$INFO Create symlink $GREEN$XFILE$BLANK -> $XFILE_EGPU"
		ln -sf $XFILE_EGPU $XFILE
		return
	fi

	if [ $1 = "internal" ]; then
		echo -e "$INFO Create symlink $GREEN$XFILE$BLANK -> $XFILE_INTERNAL"
		ln -sf $XFILE_INTERNAL $XFILE
		return
	fi

	echo -e "$ERROR The argument \"$1\" that was passed to the switch method is not valid."
}

cleanup() {
	echo -e "$INFO Starting cleanup process"
	rm -rfd $TMP_DIR
	rm -rf $XFILE_EGPU
	rm -rf $XFILE_INTERNAL
	rm -rf $INITD_RC5_SYMLINK
	rm -rf $INITD_SCRIPT

	# delete the xorg.conf file, if it is a symlink and restore the last backup
	if [ -L $XFILE ]; then
		rm -rf $XFILE
		local lastbackup=$(ls -t $XFILE_BACKUP.* | head -1)
		if [ -f $lastbackup ]; then
			echo -e "$INFO Restoring latest backup $GREEN$lastbackup"
			mv $lastbackup $XFILE
		else
			echo -e "$INFO No backup found - Nothing to restore"
		fi
	fi

	echo -e "$SUCCESS Done... Finished cleanup"
}

if [ $1 = "setup" ]; then
	setup $2
fi

if [ $1 = "switch" ]; then
	switch $2 $3
fi

if [ $1 = "cleanup" ]; then
	cleanup
fi

# systemctl restart display-manager.service
